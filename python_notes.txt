ЧИСЛА

int(s[,base])
oct(i)
hex(I)
bin(I)


СТРОКИ
str(obj), repr() - преобразование в строку

Поиск
S.find(sub[, start[, end]]) - поиск, возвращает наименьший индекс или -1 (есть rfind).
S.index(sub[, start[, end]]) - поиск, возвращает наименьший индекс или ValueError (есть rindex)
S.count( sub[, start[, end]]) - подсчёт
S.endswith( suffix[, start[, end]]) - True, если в конце есть suffix
S.startswith( prefix[, start[, end]]) - True, если в начале есть prefix

Объединение
S.join(s1,s2…) - возвращает объединение строк s1,s2…, соединённых через S

Разбиение
S.split( [sep [,maxsplit]]) - возвращает список подстрок, разбиение по строке-сепаратору. Если строка-сепаратор отсутствует - сначала удаляются лидирующие и конечные пробельные символы, потом строка бьётся по пробелам (несколько пробелов считаются за один) (есть rsplit).
S.splitlines( [keepends]) - разбиение по символам перевода строки.
S.partition( sep) - разбиение на 3 -членный кортеж (начало, сепаратор, конец) (есть rsplit())

Изменение
S.strip([chars]), rstrip([chars]),lstrip([chars]) - возвращает строку, в которой спереди/сзади удаляются символы, перечисленные в строке chars (по умолчанию - пробельные символы).
S.replace( old, new[, count]) - замена подстрок
expandtabs( [tabsize]) - замена \t на пробелы (8)
S.upper(), lower(), title( ), swapcase(), capitalize()


Выравнивание
rjust( width[, fillchar]), ljust( width[, fillchar]), center()

Проверка состава
isdigit( ), isalpha(), isalnum(), isspace(), isupper(), islower()

МНОЖЕСТВА
X - Y - разность множеств
X & Y, X.intersection(Y) - пересечение
X | Y, X.union(Y) - объединение
X ^ Y - симметрическая разность (X | Y - X & Y)
X.update(Y) - X = X | Y (присоединение Y к X)
X.add(I) - добавление элемента
X.remove(I) - удаление элемента (KeyError)

Методы в отличие от операторов могут принимать итерируемые объекты. Операторы - только множества.

JSON

import json

Выгрузка (сериализация)
s = json.dumps(obj[,...])
json.dump(obj,f)

Загрузка
obj = json.loads(s)
obj = json.load(f)

loads(dumps(x)) != x, если x имеет нестроковые ключи.

json.dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True,
        cls=None, indent=None, separators=None, default=None,
        sort_keys=False, **kw) - сериализует obj как форматированный JSON поток в fp.

Если skipkeys = True, то ключи словаря не базового типа (str, unicode, int, long, float, bool, None)
будут проигнорированы, вместо того, чтобы вызывать исключение TypeError.

Если ensure_ascii = True, все не-ASCII символы в выводе будут экранированы последовательностями
\uXXXX. Если ensure_ascii = False, строки запишутся как есть.

Если check_circular = False, то проверка циклических ссылок будет пропущена,
а такие ссылки будут вызывать OverflowError.

Если allow_nan = False, при попытке сериализовать значение с запятой,
выходящее за допустимые пределы, будет вызываться ValueError (nan, inf, -inf) в строгом
соответствии со спецификацией JSON, вместо того, чтобы использовать
эквиваленты из JavaScript (NaN, Infinity, -Infinity).

Если indent является неотрицательным числом, то массивы и объекты в JSON будут выводиться с этим уровнем отступа.
Если уровень отступа 0, отрицательный или "", то вместо этого будут просто использоваться новые строки.
Значение по умолчанию None отражает наиболее компактное представление.
Если indent - строка, то она и будет использоваться в качестве отступа.

Если sort_keys = True, то ключи выводимого словаря будут отсортированы.

Преобразования типов
Python	        JSON	    Python
dict	        object	    dict
list, tuple	    array	    list
str	            string	    str
int, float	    number	    int, float
True, False	    true,       false	True, False
None	        null	    None

LIST
L.extend(L2) - добавить в список L элементы L2
L.append(i) - добавить в конец.
L.insert(pos,i) - вставить i в позицию pos. Если список короче - вставляется в конец..

L.pop([i]) - выдать i/последний элемент и удалить его (IndexError).
L.remove(i) - удалить элемент, первый равный i (ValueError)

L.sort([key=func]) - сортирует список (если указан key - вместо элементы передаются функции, сравниваются возвращаемые значения
L.index(x[,start[,end]]) - поиск элемента в строке по значению
x in L - присутствие элемента в списке
L.count(x) - кол-во x в L

L.copy - поверхностная копия (то-же, что L[:])
L.clear() - очистка списка

СЛОВАРИ (DICT)

D.keys() - генератор ключей
D.values() - генератор кортежей (ключ,значение)
D.items() - список значений

D.update(D2) - добавление пар словаря D2 в словарь D
D.setdefault(key[,default]) - возвращает значение по ключу, если его нет - создаёт со значением default/None

D.get(key,default) - получение значения по ключу, иначе возвращает default
D.pop(key[,default]) - возврат значения по ключу с удалением (нет default и ключа - исключение)
D.popitem() - возврат случайной пары (ключ,значение) с удалением

D.copy() - возврат поверхностной копии
D.clear() - очищает словарь

ЗАРЕЗЕРВИРОВАННЫЕ СЛОВА
False class finally is return
None continue for lambda try
True def from nonlocal while
and del global not with
as elif if or yield
assert else import pass
break except in raise

ИМЕНА

_Х - не импортируюся инструкцией "from module import *"
__name__ - специальные имена
__Х - локальные для всеобъемлющего класса
_ - результат последнего выражения в интерактивной сессии

ВСТРОЕННЫЕ ФУНКЦИИ
print([object, ...][, sep=’ ‘][, end=’\n’][, file=sys.stdout])
s = chr(i)
i = ord(s)

ПРОТОКОЛ ИТЕРАЦИИ
x = iter(X)
next(x)

Выражения, использующие интерфейс итерации
for i in X:
i in X

Функции, работающие с итерируемыми объектами
sorted(X) - сортировка
filter(func,X)
map(func,X)
enumerate(X)
zip(X1,X2...)
reduce
sum(X)
any(x), all(x)
min(x), max(X)
При вызове функции при указании в аргументах *arg в качесте arg нужно передать итерируемый объект.

ОБЛАСТИ ВИДИМОСТИ
Порядок поиска переменных при обращении:
Local  - внутри функции
Enclosure - объемлющий контекст
...
Enclosure  - все объемлющие контексты "из глубины наружу"
Global - пространство модуля
Builtin - встроенные функции

Каждый вызов функции создает для функции Local Environment.
Найденные в пространствах E,G,B переменные доступны только для чтения.
При присвоении значения таким именам будет создано новое локальное имя.
Инструкция global позволяет менять переменную из Global (отображает Global имя на Local Environment),
инструкция nonlocal отображает в Local переменную из объемлющего (E) пространства.








