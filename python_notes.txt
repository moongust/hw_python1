Программа обучения
* Введение в языки, полезные программы
* Понятие алгоритма. Способы описания алгоритмов.
* Понятие программы. Инструкции, данные. Имена переменных.
* Математические (+-*/ // % **), логические операции (and,or). Операнды.
* Ввод, вывод. Операторы сравнения.

1. Понятие алгоритма, программы, операции, операндов
2. Типы данных (строки, числа), переменные, математические операции
3. Функции ввода и вывода, оператор сравнения, условный оператор
4. Последовательности (list - список, tuple - последовательность, dict - словарь, set - множество).
4.1. Циклы (while, for)
5. Функции, параметры, возвращаемые значения


ЧИСЛА

    int(s[,base])
    oct(i)
    hex(I)
    bin(I)


СТРОКИ
    str(obj), repr() - преобразование в строку

    Поиск
        S.find(sub[, start[, end]]) - поиск, возвращает наименьший индекс или -1 (есть rfind).
        S.index(sub[, start[, end]]) - поиск, возвращает наименьший индекс или ValueError (есть rindex)
        S.count( sub[, start[, end]]) - подсчёт
        S.endswith( suffix[, start[, end]]) - True, если в конце есть suffix
        S.startswith( prefix[, start[, end]]) - True, если в начале есть prefix

    Объединение
        S.join(s1,s2…) - возвращает объединение строк s1,s2…, соединённых через S

    Разбиение
        S.split( [sep [,maxsplit]]) - возвращает список подстрок, разбиение по строке-сепаратору. Если строка-сепаратор отсутствует - сначала удаляются лидирующие и конечные пробельные символы, потом строка бьётся по пробелам (несколько пробелов считаются за один) (есть rsplit).
        S.splitlines( [keepends]) - разбиение по символам перевода строки.
        S.partition( sep) - разбиение на 3 -членный кортеж (начало, сепаратор, конец) (есть rsplit())

    Изменение
        S.strip([chars]), rstrip([chars]),lstrip([chars]) - возвращает строку, в которой спереди/сзади удаляются символы, перечисленные в строке chars (по умолчанию - пробельные символы).
        S.replace( old, new[, count]) - замена подстрок
        expandtabs( [tabsize]) - замена \t на пробелы (8)
        S.upper(), lower(), title( ), swapcase(), capitalize()


    Выравнивание
        rjust( width[, fillchar]), ljust( width[, fillchar]), center()

    Проверка состава
        isdigit( ), isalpha(), isalnum(), isspace(), isupper(), islower()

МНОЖЕСТВА
    X - Y - разность множеств
    X & Y, X.intersection(Y) - пересечение
    X | Y, X.union(Y) - объединение
    X ^ Y - симметрическая разность (X | Y - X & Y)
    X.update(Y) - X = X | Y (присоединение Y к X)
    X.add(I) - добавление элемента
    X.remove(I) - удаление элемента (KeyError)

    Методы в отличие от операторов могут принимать итерируемые объекты. Операторы - только множества.

JSON

    import json

    Выгрузка (сериализация)
    s = json.dumps(obj[,...])
    json.dump(obj,f)

    Загрузка
    obj = json.loads(s)
    obj = json.load(f)

    loads(dumps(x)) != x, если x имеет нестроковые ключи.

    json.dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True,
            cls=None, indent=None, separators=None, default=None,
            sort_keys=False, **kw) - сериализует obj как форматированный JSON поток в fp.

    Если skipkeys = True, то ключи словаря не базового типа (str, unicode, int, long, float, bool, None)
    будут проигнорированы, вместо того, чтобы вызывать исключение TypeError.

    Если ensure_ascii = True, все не-ASCII символы в выводе будут экранированы последовательностями
    \uXXXX. Если ensure_ascii = False, строки запишутся как есть.

    Если check_circular = False, то проверка циклических ссылок будет пропущена,
    а такие ссылки будут вызывать OverflowError.

    Если allow_nan = False, при попытке сериализовать значение с запятой,
    выходящее за допустимые пределы, будет вызываться ValueError (nan, inf, -inf) в строгом
    соответствии со спецификацией JSON, вместо того, чтобы использовать
    эквиваленты из JavaScript (NaN, Infinity, -Infinity).

    Если indent является неотрицательным числом, то массивы и объекты в JSON будут выводиться с этим уровнем отступа.
    Если уровень отступа 0, отрицательный или "", то вместо этого будут просто использоваться новые строки.
    Значение по умолчанию None отражает наиболее компактное представление.
    Если indent - строка, то она и будет использоваться в качестве отступа.

    Если sort_keys = True, то ключи выводимого словаря будут отсортированы.

    Преобразования типов
    Python	        JSON	    Python
    dict	        object	    dict
    list, tuple	    array	    list
    str	            string	    str
    int, float	    number	    int, float
    True, False	    true,       false	True, False
    None	        null	    None

LIST
    L.extend(L2) - добавить в список L элементы L2
    L.append(i) - добавить в конец.
    L.insert(pos,i) - вставить i в позицию pos. Если список короче - вставляется в конец..

    L.pop([i]) - выдать i/последний элемент и удалить его (IndexError).
    L.remove(i) - удалить элемент, первый равный i (ValueError)

    L.sort([key=func]) - сортирует список (если указан key - вместо элементы передаются функции, сравниваются возвращаемые значения
    L.index(x[,start[,end]]) - поиск элемента в строке по значению
    x in L - присутствие элемента в списке
    L.count(x) - кол-во x в L

    L.copy - поверхностная копия (то-же, что L[:])
    L.clear() - очистка списка

СЛОВАРИ (DICT)

    D.keys() - генератор ключей
    D.values() - генератор кортежей (ключ,значение)
    D.items() - список значений

    D.update(D2) - добавление пар словаря D2 в словарь D
    D.setdefault(key[,default]) - возвращает значение по ключу, если его нет - создаёт со значением default/None

    D.get(key,default) - получение значения по ключу, иначе возвращает default
    D.pop(key[,default]) - возврат значения по ключу с удалением (нет default и ключа - исключение)
    D.popitem() - возврат случайной пары (ключ,значение) с удалением

    D.copy() - возврат поверхностной копии
    D.clear() - очищает словарь

ПРИСВАИВАНИЕ
Простое
    a = 1
Расширенная операция распаковки последовательностей
    x,*y, z = (1,2,3,4) -> x=1;y=[2,3];z=4
!!! Дописать

ЗАРЕЗЕРВИРОВАННЫЕ СЛОВА
    False class finally is return
    None continue for lambda try
    True def from nonlocal while
    and del global not with
    as elif if or yield
    assert else import pass
    break except in raise

ИМЕНА

    _Х - не импортируюся инструкцией "from module import *"
    __name__ - специальные имена
    __Х - локальные для всеобъемлющего класса
    _ - результат последнего выражения в интерактивной сессии

ВСТРОЕННЫЕ ФУНКЦИИ
    print([object, ...][, sep=’ ‘][, end=’\n’][, file=sys.stdout])
    s = chr(i)
    i = ord(s)

ПРОТОКОЛ ИТЕРАЦИИ
    x = iter(X)
    next(x)
    exception StopIteration

    Выражения, использующие интерфейс итерации
        for i in X:
        i in X

    Функции, работающие с итерируемыми объектами
        sorted(X) - сортировка
        filter(func,X)
        map(func,X)
        enumerate(X)
        zip(X1,X2...)
        functools.reduce()
        sum(X)
        any(x), all(x)
        min(x), max(X)
        При вызове функции при указании в аргументах *arg в качесте arg нужно передать итерируемый объект.

ОБЛАСТИ ВИДИМОСТИ
    Порядок поиска переменных при обращении:
    Local  - внутри функции
    Enclosure - объемлющий контекст
    ...
    Enclosure  - все объемлющие контексты "из глубины наружу"
    Global - пространство модуля
    Builtin - встроенные функции

    Каждый вызов функции создает для функции Local Environment.
    Найденные в пространствах E,G,B переменные доступны только для чтения.
    При присвоении значения таким именам будет создано новое локальное имя.
    Инструкция global позволяет менять переменную из Global (отображает Global имя на Local Environment),
    инструкция nonlocal отображает в Local переменную из объемлющего (E) пространства.

ВЫЗОВ ФУНКЦИЙ

    При определении функции могут указываться аргументы
        * обязательные позиционные
        * именованные со значением по умолчанию
        * *args - все аргументы, не совпавшие с позиционными, будут упакованы в кортеж
        * **kwargs - все неуказанные в определении именованные переменные будут переданы в виде словаря.

    Значения по умолчанию вычисляются при определении (создании) функции.
    Передаваемые значения вычисляются при вызове функции.

    При вызове функции:
        *имя - распаковать итерируемый объект в позиционные переменные (один из видов итерационного контекста);
        **имя - распаковать словарь в именованные переменные;
        если не указать обязательный позиционный аргумент (по позиции или по имени)- будет ошибка;
        нельзя указывать именованные аргументы перед позиционными.
        def kwonly(a, *b, c): - a должен передаваться как позиционный или именованный, в b будут собраны все
            прочие позиционные аргументы (если будут позиционые, то первый позиционный попадет в a,
            тогда наличие далее a как именованного вызовет ошибку), с должен быть передан как именованный.
    LE функции после завершения удаляется. Сохранить состояние после вызова функции можно:
        * в глобальных переменных;
        * посредством аргументов по умолчанию;
        * для вложенных функций - в переменных объемлющих функций (в LE объемлющих функций);
        * в атрибутах вложенной функции.

ФУНКЦИОНАЛЬНОЕ ПРОГРАММИРОВАНИЕ
    Все функции применяют функцию к другим итерируемым объектам
    map(func,iter1,...)
    filter(func,iter)
    functools.reduce(func,iter[,origin])

ГЕНЕРАТОРЫ СПИСКОВ
    l=[ x+y for x in iter1 if x>0 for y in iter2 if y>0]
    аналогичен циклу
    l=[]
    for x in iter1:
        if x>0:
            for y in iter2:
                if y>0:
                    l.append(x+y)

    (x+y for x in iter1 if x>0 for y in iter2 if y>0) - возвратит генератор

    Генераторы работают чуть быстрее, чем map,
        map работает быстрее, чем for.

    Примеры (загрузка списка строк, удаление завершающих пробельных символов)
    можно использовать open("file.txt").readlines(),
    а можно сразу использовать итерируемый объект f=open("file.txt")

    1)  l = []
        for line in open("file.txt").readlines():
            l.append(line.rstrip())
    2)  l = [line.rstrip() for line in open("file.txt")]
    3)  l = list(map(lambda line: line.rstrip(),open("file.txt")))

ГЕНЕРАТОРЫ
    Функции-генераторы:
        Функция -генератор объявляется инструкцией def, внутри def используется инструкция yield,
        приостанавливающая выполнение функции и возвращающая промежуточное значение.
        Вызов внутри функции-генератора инструкции return ведет к возбуждению StopIteration.
        При вызове функции-генератора тело функции не выполняется, а создаётся и возвращается объект-генератор,
        в нем автоматически создаётся метод __next__.
        При использовании присваивания с выражением yield вида x = (yield i) в генераторе может использоваться метод
        g.send(s). Значение s при вызове метода будет подставляться в присваивание вместо yield i.
        Также происходит следующий цикл итерации.
    Выражения-генераторы:
        Создают объект, который будет генерировать и возвращать значения по требованию.
        Синтаксис аналогичен генератору списка, но обрамлён в скобки ().


МОДУЛИ
    import m - первый раз в программе:
        * создание объекта модуля со своим пространством имен,
        * выполнение файла модуля так, что все определения файла появляются в пространстве имен модуля (поиск,
            компиляция, запуск),
        * создание переменной с именем, идентичным имени модуля, в текущем LE, присвоение ей объекта-модуля.
    Повторный import создаст переменную с именем модуля, присвоит ей ранее созданный объект.

    Поиск модуля:
        * в каталоге программы;
        * в PYTHONPATH;
        * в каталогах стандартной библиотеки;
        * в путях, указанных в файлах *.pth, которые ищутся в любом из указанных выше каталогов.
    Список sys.path содержит пути поиска модулей, создаётся в момент запуска программы по указанным выше принципам,
    может корректироваться во время выполнения.

    Импортируются файлы: *.py (модули), *.pyc (компилированные модули), файлы dll (*.so, *.dll), файлы *.zip.

    from module import name
    from module import *  - импорт всех переменных, или переменных, указанных в __all__

    imp.reload(module_obj) - запускает файл модуля еще раз в пространстве имен модуля, тем самым могут меняться атрибуты
    ранее инициализированного объекта модуля. module_obj - существующий объект модуля, а не имя.

    __dict__ - словарь атрибутов (имен) модуля
    __name__ - имя модуля, под которым он известен import


ПАКЕТЫ МОДУЛЕЙ
    __init__.py - файл, который должен быть в каталоге пакета. Исполнятеся при импорте пакета. 
	
	
КЛАССЫ
	Объявление class class_name [(base1[,base2...])]:
	Класс - это тоже объект, атрибуты которого доступны во время выполнения программы. 
	На основе классов можно создавать экземпляры объектов типа class_name путем вызова class_name(), 
	вызов возвращает объект. В этом объекте атрибуты будут ссылаться на атрибуты класса. 
	